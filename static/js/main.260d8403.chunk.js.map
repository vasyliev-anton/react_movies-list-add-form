{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","constants/validation.ts","helpers/is-url-valid.ts","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","constants/default-values.ts","constants/error-messages.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","URL_REGEXP","isUrlValid","value","match","TextField","name","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","AddMovieForm","onAdd","count","setCount","setTitle","setImgUrl","setImdbId","setImdbUrl","setDescription","reset","isAddButtonDisabled","trim","onSubmit","e","preventDefault","prev","alert","disabled","App","moviesFromServer","movieList","setMovieList","prevState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.260d8403.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","// eslint-disable-next-line max-len\nexport const URL_REGEXP = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n","import { URL_REGEXP } from '../constants/validation';\n\nexport const isUrlValid = (value: string) => value.match(URL_REGEXP);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable no-alert */\nimport { useState } from 'react';\nimport { DEFAULT_INPUT_VALUE } from '../../constants/default-values';\nimport {\n  IMDB_URL_ERROR_MESSAGE,\n  IMG_URL_ERROR_MESSAGE,\n} from '../../constants/error-messages';\nimport { isUrlValid } from '../../helpers/is-url-valid';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const AddMovieForm: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [description, setDescription] = useState('');\n\n  const reset = () => {\n    setTitle(DEFAULT_INPUT_VALUE);\n    setDescription(DEFAULT_INPUT_VALUE);\n    setImgUrl(DEFAULT_INPUT_VALUE);\n    setImdbUrl(DEFAULT_INPUT_VALUE);\n    setImdbId(DEFAULT_INPUT_VALUE);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!isUrlValid(imgUrl) || !isUrlValid(imdbUrl)) {\n      reset();\n\n      return !isUrlValid(imgUrl)\n        ? alert(IMG_URL_ERROR_MESSAGE)\n        : alert(IMDB_URL_ERROR_MESSAGE);\n    }\n\n    const newMovie = {\n      title,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      description,\n    };\n\n    onAdd(newMovie);\n    reset();\n\n    return setCount(prev => prev + 1);\n  };\n\n  const isAddButtonDisabled = (title.trim() && imgUrl && imdbUrl && imdbId);\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={setImgUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={setImdbUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isAddButtonDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","export const DEFAULT_INPUT_VALUE = '';\n","// eslint-disable-next-line max-len\nexport const IMG_URL_ERROR_MESSAGE = 'Something is wrong, check your Image URL';\nexport const IMDB_URL_ERROR_MESSAGE = 'Something is wrong, check your Imdb URL';\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { AddMovieForm } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movieList, setMovieList] = useState(moviesFromServer);\n\n  const onAdd = (movie: Movie) => {\n    setMovieList(prevState => (\n      [...prevState, movie]\n    ));\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movieList} />\n      </div>\n      <div className=\"sidebar\">\n        <AddMovieForm onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}