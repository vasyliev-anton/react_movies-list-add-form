{"version":3,"sources":["ENUM/Type.ts","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","constants/default-values.ts","constants/validation.ts","helpers/is-url-valid.ts","components/Reducer/Reducer.ts","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","constants/error-messages.ts","App.tsx","index.tsx"],"names":["Type","MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","DEFAULT_STATE_VALUE","URL_REGEXP","isUrlValid","value","match","reducer","state","action","type","RESET","TITLE","newTitle","DESCRIPTION","newDescription","IMGURL","newImgUrl","IMDBURL","IMDBID","TextField","name","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","htmlFor","classNames","placeholder","e","target","onBlur","AddMovieForm","onAdd","useReducer","newMovie","dispatch","count","setCount","isAddButtonDisabled","trim","onSubmit","preventDefault","prevCount","alert","text","disabled","App","moviesFromServer","movieList","setMovieList","prevState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20ec3a7e.chunk.js","sourcesContent":["export enum Type {\n  TITLE,\n  DESCRIPTION,\n  IMGURL,\n  IMDBURL,\n  IMDBID,\n  RESET,\n}\n","import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","export const DEFAULT_STATE_VALUE = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n","// eslint-disable-next-line max-len\nexport const URL_REGEXP = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n","import { URL_REGEXP } from '../constants/validation';\n\nexport const isUrlValid = (value: string) => value.match(URL_REGEXP);\n","import { DEFAULT_STATE_VALUE } from '../../constants/default-values';\nimport { Type } from '../../ENUM/Type';\nimport { Movie } from '../../types/Movie';\n\nexport function reducer(state: Movie, action: any) {\n  switch (action.type) {\n    case Type.RESET:\n      return DEFAULT_STATE_VALUE;\n\n    case Type.TITLE:\n      return { ...state, title: action.newTitle };\n\n    case Type.DESCRIPTION:\n      return { ...state, description: action.newDescription };\n\n    case Type.IMGURL:\n      return { ...state, imgUrl: action.newImgUrl };\n\n    case Type.IMDBURL:\n      return { ...state, imdbUrl: action.imdbUrl };\n\n    case Type.IMDBID:\n      return { ...state, imdbId: action.imdbId };\n\n    default:\n      return { ...state };\n  }\n}\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange: (text: string) => void\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={(e) => onChange(e.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable no-alert */\nimport { useReducer, useState } from 'react';\nimport { DEFAULT_STATE_VALUE } from '../../constants/default-values';\nimport {\n  IMDB_URL_ERROR_MESSAGE,\n  IMG_URL_ERROR_MESSAGE,\n} from '../../constants/error-messages';\nimport { Type } from '../../ENUM/Type';\nimport { isUrlValid } from '../../helpers/is-url-valid';\nimport { Movie } from '../../types/Movie';\nimport { reducer } from '../Reducer/Reducer';\nimport { TextField } from '../TextField';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const AddMovieForm: React.FC<Props> = ({ onAdd }) => {\n  const [newMovie, dispatch] = useReducer(reducer, DEFAULT_STATE_VALUE);\n  const [count, setCount] = useState(0);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!isUrlValid(newMovie.imgUrl) || !isUrlValid(newMovie.imdbUrl)) {\n      dispatch({ type: Type.RESET });\n\n      return !isUrlValid(newMovie.imgUrl)\n        ? alert(IMG_URL_ERROR_MESSAGE)\n        : alert(IMDB_URL_ERROR_MESSAGE);\n    }\n\n    onAdd(newMovie);\n    dispatch({ type: Type.RESET });\n\n    return setCount(prevCount => prevCount + 1);\n  };\n\n  const {\n    title, description, imgUrl, imdbUrl, imdbId,\n  } = newMovie;\n\n  const isAddButtonDisabled = (title.trim()\n  && imgUrl && imdbUrl && imdbId);\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(text) => {\n          dispatch({\n            type: Type.TITLE,\n            newTitle: text,\n          });\n        }}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(text) => {\n          dispatch({\n            type: Type.DESCRIPTION,\n            newDescription: text,\n          });\n        }}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={(text) => {\n          dispatch({\n            type: Type.IMGURL,\n            newImgUrl: text,\n          });\n        }}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={(text) => {\n          dispatch({\n            type: Type.IMDBURL,\n            imdbUrl: text,\n          });\n        }}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={(text) => {\n          dispatch({\n            type: Type.IMDBID,\n            imdbId: text,\n          });\n        }}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isAddButtonDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","// eslint-disable-next-line max-len\nexport const IMG_URL_ERROR_MESSAGE = 'Something is wrong, check your Image URL';\nexport const IMDB_URL_ERROR_MESSAGE = 'Something is wrong, check your Imdb URL';\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { AddMovieForm } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movieList, setMovieList] = useState(moviesFromServer);\n\n  const onAdd = (movie: Movie) => {\n    setMovieList(prevState => (\n      [...prevState, movie]\n    ));\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movieList} />\n      </div>\n      <div className=\"sidebar\">\n        <AddMovieForm onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}